- name: Creates deploy user
  user:
    name: "{{ laclasse_adminpanel_deploy_user }}"
    comment: "laclasse user"
  notify: Restart laclasse-adminpanel

- name: Creates deploy directory
  file:
    path: "~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/"
    owner: "{{ laclasse_adminpanel_deploy_user }}"
    state: directory
  notify: Restart laclasse-adminpanel

- name: Checkout app
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  git:
    repo: "{{ laclasse_adminpanel_repos }}"
    dest: "~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/"
    version: "{{ laclasse_adminpanel_version }}"
    accept_hostkey: true
    force: yes
  register: new_version
  notify: Restart laclasse-adminpanel

- name: Gets current tag
  shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/ && git describe --always --tag
  changed_when: false
  always_run: yes
  register: git_tag

- debug: var=git_tag.stdout

- name: Installs necessary prereqs
  apt: pkg={{ item }} state=latest
  with_items: laclasse_adminpanel_packages
  notify: Restart laclasse-adminpanel


- name: Check if a bundle is required
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc 'bundle check --no-color --path ~/bundler_shared/ || true'
  changed_when: '"dependencies are satisfied" not in bundle_required.stdout'
  register: bundle_required

- name: Bundles pack application
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc 'bundle pack --no-color --all --path  ~/bundler_shared/'
  when: bundle_required|changed

- name: Bundles application
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc 'bundle --no-color --deployment --path  ~/bundler_shared/'
  when: bundle_required|changed
  notify: Restart laclasse-adminpanel

# - name: Check if a bundle is required
#   sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
#   sudo: true
#   shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc 'bundle check --no-color || true'
#   changed_when: bundle_required.stdout != "The Gemfile's dependencies are satisfied"
#   register: bundle_required

# - name: Bundles application
#   sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
#   sudo: true
#   shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc 'bundle --no-color'
#   when: bundle_required|changed
#   notify: Restart laclasse-adminpanel

- name: Adds version.json
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  template:
    src: "../templates/version.json.j2"
    dest: "~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/public/version.json"

- name: Adds application config
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  template:
    src: "../templates/{{ item }}.j2"
    dest: "~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/config/{{ item }}"
  with_items:
    - options.rb
    - common.rb
    - puma.rb
  notify: Restart laclasse-adminpanel

- name: Adds client side application config
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  template:
    src: "../templates/constants.js.j2"
    dest: "~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/public/js/app/constants.js"

# - name: Adds temporary config.ru
#   sudo_user: "{{ laclasse.services.adminpanel.deploy_user }}"
#   sudo: true
#   template:
#     src='../templates/config.ru.j2'
#     dest="~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/config.ru"
#   notify: Restart laclasse-adminpanel

- name: Binstubs puma
  sudo_user: "{{ laclasse_adminpanel_deploy_user }}"
  sudo: true
  shell: cd ~{{ laclasse_adminpanel_deploy_user }}/laclasse-adminpanel/; bash -lc "bundle binstubs puma"
  register: puma_has_been_binstubbed
  changed_when: '"Skipped puma since it already exists" in puma_has_been_binstubbed'
  notify: Restart laclasse-adminpanel

- name: Deploys init script
  template: src="../templates/laclasse-adminpanel.init.j2" dest=/etc/init.d/laclasse-adminpanel mode=0774
  notify: Restart laclasse-adminpanel

- name: Creates log dir
  file: 
    dest: "{{ item }}/laclasse-adminpanel/"
    owner: "{{ laclasse_adminpanel_deploy_user }}"
    group: "{{ laclasse_adminpanel_deploy_user }}"
    mode: 750
    state: directory
  with_items:
    - "{{ laclasse_log_parent_dir }}"
  notify: Restart laclasse-adminpanel

- name: Registers init script
#  shell: update-rc.d laclasse-adminpanel defaults
  service: name=laclasse-adminpanel enabled=yes
  when: new_version|changed
  notify: Restart laclasse-adminpanel

- name: Check if firewall is opened
  shell: iptables-save
  register: needs_iptables
  when: firewall_rules_file is defined
  changed_when: needs_iptables.stdout.find("laclasse-adminpanel") == -1

- name: Open firewall
  shell: iptables -A TCP_IN -p tcp -m tcp --dport {{ laclasse_adminpanel_port}} -j ACCEPT -m comment --comment laclasse-adminpanel
  ignore_errors: true
  when: needs_iptables | changed

- name: Saves firewall
  shell: iptables-save > {{ firewall_rules_file }}
  when: needs_iptables|changed

